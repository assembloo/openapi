openapi: 3.0.1
servers:
  - description: Assembloo UserManager API
    url: http://sd-132400.dedibox.fr:8001/v1/usermanagers
  - description: Assembloo production API
    url: https://usermanagers.assembloo.com
info:
  version: "v1"
  title: User manager API
  description: Service to handle user management (authentication, users, groups)
  contact:
    email: support@assembloo.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

##### USER MANAGER #####
paths:
  /:
    post:
      summary: Creates a new user manager
      tags:
      - UserManagers
      requestBody:
        $ref: "#/components/requestBodies/UserManagerRequest"
      responses:
        '200':
          description: User manager successfully created
          content:
            application/json:
              schema:
                type: string
                description: the ID of the created object
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: Conflict
        '422':
          description: Invalid user manager data
  /{userManagerId}:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    get:
      summary: Returns a user manager by ID
      tags:
      - UserManagers
      responses:
        '200':
          description: A user manager
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserManager"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User manager not found
    delete:
      summary: Deletes a user manager by ID
      tags:
      - UserManagers
      responses:
        '200':
          description: The user manager was deleted
          content:
            application/json:
              schema:
                type: string
                description: the ID of the deleted object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User manager not found

  ##### AUTHENTICATION CONFIGURATION #####
  
#  /{userManagerId}/authentication/providers/search:
#    parameters:
#    - "$ref": "#/components/parameters/userManagerIdParam"
#    post:
#      summary: Search the authentication providers
#      tags:
#      - AuthenticationProviders
#      requestBody:
#        $ref: "#/components/requestBodies/SearchRequest"
#      responses:
#        '200':
#          $ref: '#/components/responses/SearchResponse'
#        '401':
#          $ref: '#/components/responses/UnauthorizedError'
#  /{userManagerId}/authentication/providers:
#    parameters:
#    - "$ref": "#/components/parameters/userManagerIdParam"
#    get:
#      summary: List the authentication providers
#      tags:
#      - AuthenticationProviders
#      parameters:
#      - "$ref": "#/components/parameters/pageParam"
#      responses:
#        '200':
#          $ref: '#/components/responses/SearchResponse'
#        '401':
#          $ref: '#/components/responses/UnauthorizedError'

##### ASSEMBLOO AUTHENTICATION CONFIGURATION #####

  /{userManagerId}/authentication/providers/assembloo:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    get:
      summary: Returns the assembloo authentication provider
      operationId: get
      tags:
      - AssemblooAuthenticationProvider
      responses:
        '200':
          description: A assembloo authentication provider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssemblooAuthenticationProvider"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Authentication provider not found
    post:
      summary: Adds the assembloo authentication provider
      operationId: create
      tags:
      - AssemblooAuthenticationProvider
      requestBody:
        $ref: "#/components/requestBodies/AssemblooAuthenticationProviderRequest"
      responses:
        '200':
          description: Authentication provider successfully created
          content:
            application/json:
              schema:
                type: string
                description: the ID of the created object
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Updates the assembloo authentication provider
      operationId: update
      tags:
      - AssemblooAuthenticationProvider
      requestBody:
        $ref: "#/components/requestBodies/AssemblooAuthenticationProviderRequest"
      responses:
        '200':
          description: The assembloo authentication provider was updated
          content:
            application/json:
              schema:
                type: string
                description: the ID of the updated object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Authentication provider not found
    delete:
      summary: Deletes the assembloo authentication provider
      operationId: delete
      tags:
      - AssemblooAuthenticationProvider
      responses:
        '200':
          description: The assembloo authentication provider was deleted
          content:
            application/json:
              schema:
                type: string
                description: the ID of the deleted object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Authentication provider not found


##### FACEBOOK AUTHENTICATION CONFIGURATION #####

  /{userManagerId}/authentication/providers/facebook:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    get:
      summary: Returns the facebook authentication provider
      operationId: get
      tags:
      - FacebookAuthenticationProvider
      responses:
        '200':
          description: A facebook authentication provider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FacebookAuthenticationProvider"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Authentication provider not found
    post:
      summary: Adds the facebook authentication provider
      operationId: create
      tags:
      - FacebookAuthenticationProvider
      requestBody:
        $ref: "#/components/requestBodies/FacebookAuthenticationProviderRequest"
      responses:
        '200':
          description: Authentication provider successfully created
          content:
            application/json:
              schema:
                type: string
                description: the ID of the created object
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Updates the facebook authentication provider
      operationId: update
      tags:
      - FacebookAuthenticationProvider
      requestBody:
        $ref: "#/components/requestBodies/FacebookAuthenticationProviderRequest"
      responses:
        '200':
          description: The facebook authentication provider was updated
          content:
            application/json:
              schema:
                type: string
                description: the ID of the updated object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Authentication provider not found
    delete:
      summary: Deletes the facebook authentication provider
      operationId: delete
      tags:
      - FacebookAuthenticationProvider
      responses:
        '200':
          description: The facebook authentication provider was deleted
          content:
            application/json:
              schema:
                type: string
                description: the ID of the deleted object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Authentication provider not found

##### GITHUB AUTHENTICATION CONFIGURATION #####

  /{userManagerId}/authentication/providers/github:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    get:
      summary: Returns the github authentication provider
      operationId: get
      tags:
      - GithubAuthenticationProvider
      responses:
        '200':
          description: A github authentication provider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GithubAuthenticationProvider"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Authentication provider not found
    post:
      summary: Adds the github authentication provider
      operationId: create
      tags:
      - GithubAuthenticationProvider
      requestBody:
        $ref: "#/components/requestBodies/GithubAuthenticationProviderRequest"
      responses:
        '200':
          description: Authentication provider successfully created
          content:
            application/json:
              schema:
                type: string
                description: the ID of the created object
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Updates the github authentication provider
      operationId: update
      tags:
      - GithubAuthenticationProvider
      requestBody:
        $ref: "#/components/requestBodies/GithubAuthenticationProviderRequest"
      responses:
        '200':
          description: The github authentication provider was updated
          content:
            application/json:
              schema:
                type: string
                description: the ID of the updated object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Authentication provider not found
    delete:
      summary: Deletes the github authentication provider
      operationId: delete
      tags:
      - GithubAuthenticationProvider
      responses:
        '200':
          description: The github authentication provider was deleted
          content:
            application/json:
              schema:
                type: string
                description: the ID of the deleted object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Authentication provider not found

##### GOOGLE AUTHENTICATION CONFIGURATION #####

  /{userManagerId}/authentication/providers/google:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    get:
      summary: Returns the google authentication provider
      operationId: get
      tags:
      - GoogleAuthenticationProvider
      responses:
        '200':
          description: A google authentication provider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoogleAuthenticationProvider"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Authentication provider not found
    post:
      summary: Adds the google authentication provider
      operationId: create
      tags:
      - GoogleAuthenticationProvider
      requestBody:
        $ref: "#/components/requestBodies/GoogleAuthenticationProviderRequest"
      responses:
        '200':
          description: Authentication provider successfully created
          content:
            application/json:
              schema:
                type: string
                description: the ID of the created object
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Updates the google authentication provider
      operationId: update
      tags:
      - GoogleAuthenticationProvider
      requestBody:
        $ref: "#/components/requestBodies/GoogleAuthenticationProviderRequest"
      responses:
        '200':
          description: The google authentication provider was updated
          content:
            application/json:
              schema:
                type: string
                description: the ID of the updated object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Authentication provider not found
    delete:
      summary: Deletes the google authentication provider
      operationId: delete
      tags:
      - GoogleAuthenticationProvider
      responses:
        '200':
          description: The google authentication provider was deleted
          content:
            application/json:
              schema:
                type: string
                description: the ID of the deleted object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Authentication provider not found

  ##### AUTHENTICATION #####
#  /{userManagerId}/authentication/signin:
#    parameters:
#    - "$ref": "#/components/parameters/userManagerIdParam"
#    get:
#      summary: display a login screen
#      operationId: getSignin
#      tags:
#      - Authentication
#      responses:
#        '200':
#          description: the signing page is displayed
#          content:
#            text/html:
#              schema:
#                type: string
#        '400':
#          description: Bad request

  /{userManagerId}/authentication/assembloo/signin:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    post:
      summary: sign the user in using the assembloo provider
      operationId: doAssemblooSignin
      tags:
      - Authentication
      requestBody:
        $ref: '#/components/requestBodies/SigninRequest'
      responses:
        '200':
          $ref: '#/components/responses/SigninResponse'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Invalid AssemblooSigninRequest data


  /{userManagerId}/authentication/assembloo/signup:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
#    get:
#      summary: display the signup page
#      operationId: getAssemblooSignup
#      tags:
#      - Authentication
#      responses:
#        '200':
#          description: the signup page is displayed
#          content:
#            text/html:
#              schema:
#                type: string

    post:
      summary: signup page
      operationId: doAssemblooSignup
      tags:
      - Authentication
      requestBody:
        $ref: "#/components/requestBodies/SignupRequest"
      responses:
        '200':
          description: The user successfully signed-up
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad request

  /{userManagerId}/authentication/facebook/signin:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/clientCallbackUrlParam"
    get:
      summary: sign the user into facebook
      operationId: doFacebookSignin
      tags:
      - Authentication
      responses:
        '302':
          description: The authorization provider will redirect you to its login page
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Invalid AuthorizationProvider data

  /{userManagerId}/authentication/facebook/signout:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    get:
      summary: sign the user out
      operationId: doFacebookSignout
      tags:
      - Authentication
      responses:
        '200':
          description: the user was signed-out
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /{userManagerId}/authentication/facebook/callback:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/oauth2Code"
    - "$ref": "#/components/parameters/oauth2State"
    get:
      operationId: doFacebookCallback
      summary: callback url called by authentication provider
      tags:
      - Authentication
      responses:
        '200':
          $ref: '#/components/responses/SigninResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /{userManagerId}/authentication/github/signin:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/clientCallbackUrlParam"
    get:
      summary: sign the user into github
      operationId: doGithubSignin
      tags:
      - Authentication
      responses:
        '302':
          description: The authorization provider will redirect you to its login page
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Invalid AuthorizationProvider data

  /{userManagerId}/authentication/github/signout:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    get:
      summary: sign the user out
      operationId: doGithubSignout
      tags:
      - Authentication
      responses:
        '200':
          description: the user was signed-out
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /{userManagerId}/authentication/github/callback:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/oauth2Code"
    - "$ref": "#/components/parameters/oauth2State"
    get:
      operationId: doGithubCallback
      summary: callback url called by authentication provider
      tags:
      - Authentication
      responses:
        '200':
          $ref: '#/components/responses/SigninResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /{userManagerId}/authentication/google/signin:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/clientCallbackUrlParam"
    get:
      summary: sign the user into google
      operationId: doGoogleSignin
      tags:
      - Authentication
      responses:
        '302':
          description: The authorization provider will redirect you to its login page
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Invalid AuthorizationProvider data

  /{userManagerId}/authentication/google/signout:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    get:
      summary: sign the user out
      operationId: doGoogleSignout
      tags:
      - Authentication
      responses:
        '200':
          description: the user was signed-out
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /{userManagerId}/authentication/google/callback:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/oauth2Code"
    - "$ref": "#/components/parameters/oauth2State"
    get:
      operationId: doGoogleCallback
      summary: callback url called by authentication provider
      tags:
      - Authentication
      responses:
        '200':
          $ref: '#/components/responses/SigninResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  ##### AUTHORIZATION CONFIGURATION #####
  /{userManagerId}/authorization/providers/search:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    post:
      summary: Search the authorization providers
      tags:
      - AuthorizationProviders
      requestBody:
        $ref: "#/components/requestBodies/SearchRequest"
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /{userManagerId}/authorization/providers:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    get:
      summary: List the authorization providers
      tags:
      - AuthorizationProviders
      parameters:
      - "$ref": "#/components/parameters/pageParam"
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    post:
      summary: add a new AuthorizationProvider
      tags:
      - AuthorizationProviders
      requestBody:
        $ref: "#/components/requestBodies/AuthorizationProviderRequest"
      responses:
        '200':
          description: AuthorizationProvider successfully created
          content:
            application/json:
              schema:
                type: string
                description: the ID of the created object
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Invalid AuthorizationProvider data

  /{userManagerId}/authorization/providers/{authorizationProviderId}:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/authorizationProviderIdParam"
    get:
      summary: Returns an AuthorizationProvider by ID
      tags:
      - AuthorizationProviders
      responses:
        '200':
          description: An authorization provider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationProvider"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: AuthorizationProvider not found
    delete:
      summary: Deletes an authorization provider by ID
      tags:
      - AuthorizationProviders
      responses:
        '200':
          description: The authorization provider was deleted
          content:
            application/json:
              schema:
                type: string
                description: the ID of the deleted object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: AuthorizationProvider not found
    put:
      summary: Updates an authorization provider by ID
      tags:
      - AuthorizationProviders
      requestBody:
        $ref: "#/components/requestBodies/AuthorizationProviderRequest"
      responses:
        '200':
          description: The authorization provider was updated
          content:
            application/json:
              schema:
                type: string
                description: the ID of the updated object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: AuthorizationProvider not found

  ##### SESSIONS #####
  /{userManagerId}/sessions:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    post:
      summary: Creates a new session
      tags:
      - Sessions
      requestBody:
        $ref: "#/components/requestBodies/SessionRequest"
      responses:
        '200':
          description: Session successfully created
          content:
            application/json:
              schema:
                type: string
                description: the ID of the created object
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Invalid session data

  /{userManagerId}/sessions/{sessionId}:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/sessionIdParam"
    get:
      summary: Returns a session by ID
      tags:
      - Sessions
      responses:
        '200':
          description: A session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Session not found
    delete:
      summary: Deletes a session by ID
      tags:
      - Sessions
      responses:
        '200':
          description: The session was deleted
          content:
            application/json:
              schema:
                type: string
                description: the ID of the deleted object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Session not found
    put:
      summary: Updates a session by ID
      tags:
      - Sessions
      requestBody:
        $ref: "#/components/requestBodies/SessionRequest"
      responses:
        '200':
          description: The session was updated
          content:
            application/json:
              schema:
                type: string
                description: the ID of the updated object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Session not found

  ##### USERS #####
  /{userManagerId}/users/search:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    post:
      summary: Search the users
      tags:
      - Users
      requestBody:
        $ref: "#/components/requestBodies/SearchRequest"
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /{userManagerId}/users:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    get:
      summary: List the users
      tags:
      - Users
      parameters:
      - "$ref": "#/components/parameters/pageParam"
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Creates a new user
      tags:
      - Users
      requestBody:
        $ref: "#/components/requestBodies/UserRequest"
      responses:
        '200':
          description: User successfully created
          content:
            application/json:
              schema:
                type: string
                description: the ID of the created object
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Invalid user data
  /{userManagerId}/users/{userId}:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/userIdParam"
    get:
      summary: Returns a user by ID
      tags:
      - Users
      responses:
        '200':
          description: A user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
    delete:
      summary: Deletes a user by ID
      tags:
      - Users
      responses:
        '200':
          description: The user was deleted
          content:
            application/json:
              schema:
                type: string
                description: the ID of the deleted object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
    put:
      summary: Updates a user by ID
      tags:
      - Users
      requestBody:
        $ref: "#/components/requestBodies/UserRequest"
      responses:
        '200':
          description: The user was updated
          content:
            application/json:
              schema:
                type: string
                description: the ID of the updated object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
  /{userManagerId}/users/{userId}/password:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/userIdParam"
    post:
      operationId: setPassword
      summary: Sets the user's password
      tags:
      - Users
      requestBody:
        $ref: "#/components/requestBodies/UserPasswordReq"
      responses:
        '200':
          description: The password was set
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  ##### ACCESS TOKENS #####
  /{userManagerId}/access_tokens:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    post:
      summary: Creates a new access token
      tags:
      - Access Tokens
      requestBody:
        $ref: "#/components/requestBodies/AccessTokenRequest"
      responses:
        '200':
          description: Access token successfully created
          content:
            application/json:
              schema:
                type: string
                description: the ID of the created object
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Invalid access token data
  /{userManagerId}/access_tokens/{accessTokenId}:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/accessTokenIdParam"
    get:
      summary: Returns an access token by ID
      tags:
      - Access Tokens
      responses:
        '200':
          description: An access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessToken"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Access token not found
    delete:
      summary: Deletes an access token by ID
      tags:
      - Access Tokens
      responses:
        '200':
          description: The access token was deleted
          content:
            application/json:
              schema:
                type: string
                description: the ID of the deleted object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found

  ##### GROUPS #####
  /{userManagerId}/groups/search:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    post:
      summary: Search the groups
      tags:
      - Groups
      requestBody:
        $ref: "#/components/requestBodies/SearchRequest"
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /{userManagerId}/groups:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    get:
      summary: List the groups
      tags:
      - Groups
      parameters:
      - "$ref": "#/components/parameters/pageParam"
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Creates a new group
      tags:
      - Groups
      requestBody:
        $ref: "#/components/requestBodies/GroupRequest"
      responses:
        '200':
          description: Group successfully created
          content:
            application/json:
              schema:
                type: string
                description: the ID of the created object
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Invalid group data
  /{userManagerId}/groups/{groupId}:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/groupIdParam"
    get:
      summary: Returns a group by ID
      tags:
      - Groups
      responses:
        '200':
          description: A group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Group not found
    delete:
      summary: Deletes a group by ID
      tags:
      - Groups
      responses:
        '200':
          description: The group was deleted
          content:
            application/json:
              schema:
                type: string
                description: the ID of the deleted object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Group not found
    put:
      summary: Updates a group by ID
      tags:
      - Groups
      requestBody:
        $ref: "#/components/requestBodies/GroupRequest"
      responses:
        '200':
          description: The group was updated
          content:
            application/json:
              schema:
                type: string
                description: the ID of the updated object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Group not found

  /{userManagerId}/groups/{groupId}/members/search:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/groupIdParam"
    post:
      operationId: search
      summary: Search the group's members
      tags:
      - GroupMembers
      requestBody:
        $ref: "#/components/requestBodies/SearchRequest"
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /{userManagerId}/groups/{groupId}/members:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/groupIdParam"
    get:
      operationId: list
      summary: List the group's members
      tags:
      - GroupMembers
      parameters:
      - "$ref": "#/components/parameters/pageParam"
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      operationId: add
      summary: Add a member to the group
      tags:
      - GroupMembers
      requestBody:
        $ref: "#/components/requestBodies/UserGroupRequest"
      responses:
        '200':
          description: User successfully added to group
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Invalid data

  /{userManagerId}/groups/{groupId}/members/{userId}:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/groupIdParam"
    - "$ref": "#/components/parameters/userIdParam"
    delete:
      operationId: remove
      summary: Remove a member from a group
      tags:
      - GroupMembers
      responses:
        '200':
          description: User successfully removed from group
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /{userManagerId}/groups/members/{userId}:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/userIdParam"
    get:
      operationId: getMemberGroupIds
      summary: Get the member's group ids
      tags:
      - GroupMembers
      responses:
        '200':
          $ref: '#/components/responses/GroupIdsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AssemblooAuthenticationProvider:
      type: object
      properties:
        id:
          type: string
        enabled:
          type: boolean
        callbackUrls:
          type: array
          items:
            type: string
            format: uri
          minItems: 1
        allowSignup:
          type: boolean
      required:
        - enabled
        - callbackUrls

    FacebookAuthenticationProvider:
      type: object
      properties:
        id:
          type: string
        enabled:
          type: boolean
        callbackUrls:
          type: array
          items:
            type: string
            format: uri
          minItems: 1
        clientId:
          type: string
        clientSecret:
          type: string
      required:
        - enabled
        - callbackUrls
        - clientId
        - clientSecret

    GithubAuthenticationProvider:
      type: object
      properties:
        id:
          type: string
        enabled:
          type: boolean
        callbackUrls:
          type: array
          items:
            type: string
            format: uri
          minItems: 1
        clientId:
          type: string
        clientSecret:
          type: string
      required:
        - enabled
        - callbackUrls
        - clientId
        - clientSecret

    GoogleAuthenticationProvider:
      type: object
      properties:
        id:
          type: string
        enabled:
          type: boolean
        callbackUrls:
          type: array
          items:
            type: string
            format: uri
          minItems: 1
        clientId:
          type: string
        clientSecret:
          type: string
      required:
        - enabled
        - callbackUrls
        - clientId
        - clientSecret

    AuthorizationProvider:
      type: object
      properties:
        id:
          type: string
      required:
      - id

    UserManager:
      type: object
      properties:
        id:
          type: string
          pattern: "^[a-z]+[a-z0-9\\-\\.]*$"
      required:
      - id
      example:
        id: my-user-manager
  
    Session:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        timeout:
          type: integer
          minimum: 0
        endDate:
          type: string
          format: date-time
        lastAccess:
          type: string
          format: date-time
      required:
      - id
      - userId
      - timeout
      example:
        id: 63312df2-dabd-46c4-a090-b5e628266329
        email: johndoe@example.com

    SigninRequest:
      type: object
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
        mapping:
          password:  '#/components/schemas/PasswordSigninRequest'
          oauth2:  '#/components/schemas/Oauth2SigninRequest'

    PasswordSigninRequest:
      allOf:
      - $ref: '#/components/schemas/SigninRequest'
      - type: object
        properties:
          email:
            type: string
          password:
            type: string
        required:
          - email
          - password

    Oauth2SigninRequest:
      allOf:
      - $ref: '#/components/schemas/SigninRequest'
      - type: object
        properties:
          callback_url:
            type: string
          provider_type:
            $ref: '#/components/schemas/Oauth2ProviderType'
            

    Oauth2ProviderType:
      type: string
      enum:
        - google
        - facebook
        - github

    SignupRequest:
      type: object
      properties:
        signupProviderId:
          type: string
        ignoreExistingUser:
          type: boolean

    Token:
      type: object
      properties:
        token:
          type: string
      example:
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
      required:
      - token
  
    User:
      type: object
      properties:
        id:
          type: string
        attributes:
          type: object
          additionalProperties:
            type: string
        status:
          $ref: '#/components/schemas/UserStatus'
      required:
      - id
      - attributes
      example:
        id: 63312df2-dabd-46c4-a090-b5e628266329
        attributes:
          email: johndoe@example.com
          firstname: john
          lastname: doe

    UserStatus:
      type: string
      enum:
        - email_confirmation_required
        - active
        - inactive
      description: "state of the user account: active means the user can login, inactive means the user cannot log in, email_confirmation_required means another step is required to set the account to active"
        
    AccessToken:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        name:
          type: string
        startDate:
          type: string
        endDate:
          type: string
      required:
      - id
      - userId
      - name
      example:
        id: 63312df2-dabd-46c4-a090-b5e628266329
        name: my token
        
    Group:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
      - name
      example:
        id: 63312df2-dabd-46c4-a090-b5e628266329
        name: "My group"
      
    NewPasswordRequest:
      type: object
      properties:
        old_password:
          type: string
          description: if there is one, we need the old password for security
        new_password:
          type: string
          description: the new password we want for that user
      required:
      - new_password
      
    GroupMembership:
      type: object
      properties:
        id:
          type: string
        groupId:
          type: string
        userId:
          type: string
      required:
      - id
      - groupId
      - userId

    SessionsResponse:     
      type: object
      properties:
        sessions:
          type: array
          items:
            type: string

    GroupIdsResponse:
      type: object
      properties:
        groupIds:
          type: array
          items:
            type: string
      
  parameters:
    pageParam:
      name: page
      in: query
      description: Page number
      schema:
        type: integer
        minimum: 0
        default: 0

    authorizationProviderIdParam:
      in: path
      name: authorizationProviderId
      schema:
        type: string
      required: true
      description: The authorization provider id

    sessionIdParam:
      in: path
      name: sessionId
      schema:
        type: string
      required: true
      description: The session id

    userManagerIdParam:
      in: path
      name: userManagerId
      schema:
        type: string
      required: true
      description: The user manager instance id
      
    userIdParam:
      in: path
      name: userId
      schema:
        type: string
      required: true
      description: The user id
      
    accessTokenIdParam:
      in: path
      name: accessTokenId
      schema:
        type: string
      required: true
      description: The access token id
      
    groupIdParam:
      in: path
      name: groupId
      schema:
        type: string
      required: true
      description: The group id

    oauth2Code:
      in: query
      name: code
      schema:
        type: string
      required: true
      description: The auth code from the Authorization Code flow

    oauth2State:
      in: query
      name: state
      schema:
        type: string
      required: true
      description: The auth state given to the oauth2 authorization server

    clientCallbackUrlParam:
      in: query
      name: clientCallbackUrl
      schema:
        type: string
      required: true
      description: The URL to return to once the signin is done
  
  requestBodies:
    SearchRequest:
      description: The structure to describe the search wanted and what to return
      required: true
      content:
        application/json:
          schema:
            $ref: "https://raw.githubusercontent.com/assembloo/openapi/1.0.0/repository-search.yml#/components/schemas/SearchRequest"

    SigninRequest:
      description: The structure to describe signin requests
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SigninRequest'

    SignupRequest:
      description: The structure to describe signup requests
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignupRequest'

    UserManagerRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserManager'

    AssemblooAuthenticationProviderRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AssemblooAuthenticationProvider'

    FacebookAuthenticationProviderRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FacebookAuthenticationProvider'

    GithubAuthenticationProviderRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GithubAuthenticationProvider'

    GoogleAuthenticationProviderRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GoogleAuthenticationProvider'

    AuthorizationProviderRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthorizationProvider'

    SessionRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Session"

    UserRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"

    UserPasswordReq:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NewPasswordRequest"
            
    AccessTokenRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AccessToken"
        
    GroupRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Group"
            
    UserGroupRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GroupMembership"
            
  responses:      
    GroupIdsResponse:
      description: The user's group ids response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GroupIdsResponse"

    SearchResponse:
      description: A search response of the given object
      content:
        application/json:
          schema:
            $ref: "https://raw.githubusercontent.com/assembloo/openapi/1.0.0/repository-search.yml#/components/schemas/SearchResponse"

    SessionsResponse:
      description: The sessions response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SessionsResponse"

    SigninResponse:
      description: The structure to describe signin responses
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"

    UnauthorizedError:
      description: Access token is missing or invalid
      headers:
        WWW-Authenticate:
          schema:
            type: string
            enum:
            - Bearer
            - OAuth
            description: describe the authorization method required to complete authentication

tags:
  - name: Access Tokens
  - name: Authentication
  - name: AssemblooAuthenticationProvider
  - name: FacebookAuthenticationProvider
  - name: GithubAuthenticationProvider
  - name: GoogleAuthenticationProvider
  - name: AuthorizationProviders
  - name: Groups
  - name: Sessions
  - name: UserManagers
  - name: Users
  
security:
  - bearerAuth: []
  
# EOF