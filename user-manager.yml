openapi: 3.0.1
servers:
  - description: Assembloo test1 API
    url: http://sd-132400.dedibox.fr:8001/v1/usermanagers
  - description: Assembloo production API
    url: https://usermanagers.assembloo.com
info:
  version: "v1"
  title: User manager API
  description: Service to handle user management (authentication, users, groups)
  contact:
    email: support@assembloo.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

    
paths:

  /:
    post:
      summary: Creates a new user manager
      tags:
      - UserManagers
      requestBody:
        $ref: "#/components/requestBodies/UserManagerRequest"
      responses:
        '200':
          description: User manager successfully created
          content:
            application/json:
              schema:
                type: string
                description: the ID of the created object
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: Conflict
        '422':
          description: Invalid user manager data
  /{userManagerId}:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    get:
      summary: Returns a user manager by ID
      tags:
      - UserManagers
      responses:
        '200':
          description: A user manager
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserManager"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User manager not found
    delete:
      summary: Deletes a user manager by ID
      tags:
      - UserManagers
      responses:
        '200':
          description: The user manager was deleted
          content:
            application/json:
              schema:
                type: string
                description: the ID of the deleted object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User manager not found
  ##### AUTHENTICATE #####
  /{userManagerId}/authenticate/password:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    post:
      operationId: authenticate
      summary: Authenticates the user with an email/password combo
      tags:
      - Authenticate
      requestBody:
        $ref: "#/components/requestBodies/LoginRequest"
      responses:
        '200':
          $ref: '#/components/responses/LoginResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  ##### SESSIONS #####
  /{userManagerId}/sessions:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    post:
      summary: Creates a new session
      tags:
      - Sessions
      requestBody:
        $ref: "#/components/requestBodies/SessionRequest"
      responses:
        '200':
          description: Session successfully created
          content:
            application/json:
              schema:
                type: string
                description: the ID of the created object
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Invalid session data

  /{userManagerId}/sessions/{sessionId}:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/sessionIdParam"
    get:
      summary: Returns a session by ID
      tags:
      - Sessions
      responses:
        '200':
          description: A session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Session not found
    delete:
      summary: Deletes a session by ID
      tags:
      - Sessions
      responses:
        '200':
          description: The session was deleted
          content:
            application/json:
              schema:
                type: string
                description: the ID of the deleted object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Session not found
    put:
      summary: Updates a session by ID
      tags:
      - Sessions
      requestBody:
        $ref: "#/components/requestBodies/SessionRequest"
      responses:
        '200':
          description: The session was updated
          content:
            application/json:
              schema:
                type: string
                description: the ID of the updated object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Session not found

  ##### USERS #####
  /{userManagerId}/users/search:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    post:
      summary: Search the users
      tags:
      - Users
      requestBody:
        $ref: "#/components/requestBodies/SearchRequest"
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /{userManagerId}/users:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    get:
      summary: List the users
      tags:
      - Users
      parameters:
      - "$ref": "#/components/parameters/pageParam"
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Creates a new user
      tags:
      - Users
      requestBody:
        $ref: "#/components/requestBodies/UserRequest"
      responses:
        '200':
          description: User successfully created
          content:
            application/json:
              schema:
                type: string
                description: the ID of the created object
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Invalid user data
  /{userManagerId}/users/{userId}:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/userIdParam"
    get:
      summary: Returns a user by ID
      tags:
      - Users
      responses:
        '200':
          description: A user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
    delete:
      summary: Deletes a user by ID
      tags:
      - Users
      responses:
        '200':
          description: The user was deleted
          content:
            application/json:
              schema:
                type: string
                description: the ID of the deleted object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
    put:
      summary: Updates a user by ID
      tags:
      - Users
      requestBody:
        $ref: "#/components/requestBodies/UserRequest"
      responses:
        '200':
          description: The user was updated
          content:
            application/json:
              schema:
                type: string
                description: the ID of the updated object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
  /{userManagerId}/users/{userId}/password:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/userIdParam"
    post:
      operationId: setPassword
      summary: Sets the user's password
      tags:
      - Users
      requestBody:
        $ref: "#/components/requestBodies/UserPasswordReq"
      responses:
        '200':
          description: The password was set
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  ##### ACCESS TOKENS #####
  /{userManagerId}/access_tokens:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    post:
      summary: Creates a new access token
      tags:
      - Access Tokens
      requestBody:
        $ref: "#/components/requestBodies/AccessTokenRequest"
      responses:
        '200':
          description: Access token successfully created
          content:
            application/json:
              schema:
                type: string
                description: the ID of the created object
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Invalid access token data
  /{userManagerId}/access_tokens/{accessTokenId}:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/accessTokenIdParam"
    get:
      summary: Returns an access token by ID
      tags:
      - Access Tokens
      responses:
        '200':
          description: An access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessToken"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Access token not found
    delete:
      summary: Deletes an access token by ID
      tags:
      - Access Tokens
      responses:
        '200':
          description: The access token was deleted
          content:
            application/json:
              schema:
                type: string
                description: the ID of the deleted object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found

  ##### GROUPS #####
  /{userManagerId}/groups/search:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    post:
      summary: Search the groups
      tags:
      - Groups
      requestBody:
        $ref: "#/components/requestBodies/SearchRequest"
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /{userManagerId}/groups:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    get:
      summary: List the groups
      tags:
      - Groups
      parameters:
      - "$ref": "#/components/parameters/pageParam"
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Creates a new group
      tags:
      - Groups
      requestBody:
        $ref: "#/components/requestBodies/GroupRequest"
      responses:
        '200':
          description: Group successfully created
          content:
            application/json:
              schema:
                type: string
                description: the ID of the created object
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Invalid group data
  /{userManagerId}/groups/{groupId}:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/groupIdParam"
    get:
      summary: Returns a group by ID
      tags:
      - Groups
      responses:
        '200':
          description: A group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Group not found
    delete:
      summary: Deletes a group by ID
      tags:
      - Groups
      responses:
        '200':
          description: The group was deleted
          content:
            application/json:
              schema:
                type: string
                description: the ID of the deleted object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Group not found
    put:
      summary: Updates a group by ID
      tags:
      - Groups
      requestBody:
        $ref: "#/components/requestBodies/GroupRequest"
      responses:
        '200':
          description: The group was updated
          content:
            application/json:
              schema:
                type: string
                description: the ID of the updated object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Group not found
  /{userManagerId}/groups/{groupId}/users/search:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/groupIdParam"
    post:
      operationId: searchUsers
      summary: Search the group's users
      tags:
      - Groups
      requestBody:
        $ref: "#/components/requestBodies/SearchRequest"
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /{userManagerId}/groups/{groupId}/users:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/groupIdParam"
    get:
      operationId: listUsers
      summary: List the group's users
      tags:
      - Groups
      parameters:
      - "$ref": "#/components/parameters/pageParam"
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      operationId: addUser
      summary: Add a user to the group
      tags:
      - Groups
      requestBody:
        $ref: "#/components/requestBodies/UserGroupRequest"
      responses:
        '200':
          description: User successfully added to group
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Invalid data
  /{userManagerId}/groups/{groupId}/users/{userId}:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/groupIdParam"
    - "$ref": "#/components/parameters/userIdParam"
    delete:
      operationId: removeUser
      summary: Remove a user from a group
      tags:
      - Groups
      responses:
        '200':
          description: User successfully removed from group
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /{userManagerId}/groups/users/{userId}:
    parameters:
    - "$ref": "#/components/parameters/userManagerIdParam"
    - "$ref": "#/components/parameters/userIdParam"
    get:
      operationId: getUserGroupIds
      summary: Get the user's group ids
      tags:
      - Groups
      responses:
        '200':
          $ref: '#/components/responses/GroupIdsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserManager:
      type: object
      properties:
        id:
          type: string
          pattern: "^[a-z]+[a-z0-9\\-\\.]*$"
      required:
      - id
      example:
        id: my-user-manager
  
    EmailLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
      - email
      - password

    Session:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        timeout:
          type: integer
          minimum: 0
        endDate:
          type: string
          format: date-time
        lastAccess:
          type: string
          format: date-time
      required:
      - id
      - userId
      - timeout
      example:
        id: 63312df2-dabd-46c4-a090-b5e628266329
        email: johndoe@example.com

    Token:
      type: object
      properties:
        token:
          type: string
      example:
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
      required:
      - token
  
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        password:
          type: string
      required:
      - email
      - password
      example:
        id: 63312df2-dabd-46c4-a090-b5e628266329
        email: johndoe@example.com
        
    AccessToken:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        name:
          type: string
        startDate:
          type: string
        endDate:
          type: string
      required:
      - id
      - userId
      - name
      example:
        id: 63312df2-dabd-46c4-a090-b5e628266329
        name: my token
        
    Group:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
      - name
      example:
        id: 63312df2-dabd-46c4-a090-b5e628266329
        name: "My group"
      
    NewPasswordRequest:
      type: object
      properties:
        old_password:
          type: string
          description: if there is one, we need the old password for security
        new_password:
          type: string
          description: the new password we want for that user
      required:
      - new_password
      
    GroupMembership:
      type: object
      properties:
        id:
          type: string
        groupId:
          type: string
        userId:
          type: string
      required:
      - id
      - groupId
      - userId

    LoginResponse:      
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        token:
          type: string
      required:
      - email
      - id
      - token

    SessionsResponse:     
      type: object
      properties:
        sessions:
          type: array
          items:
            type: string

    GroupIdsResponse:
      type: object
      properties:
        groupIds:
          type: array
          items:
            type: string
      
  parameters:
    pageParam:
      name: page
      in: query
      description: Page number
      schema:
        type: integer
        minimum: 0
        default: 0

    sessionIdParam:
      in: path
      name: sessionId
      schema:
        type: string
      required: true
      description: The session id

    userManagerIdParam:
      in: path
      name: userManagerId
      schema:
        type: string
      required: true
      description: The user manager instance id
      
    userIdParam:
      in: path
      name: userId
      schema:
        type: string
      required: true
      description: The user id
      
    accessTokenIdParam:
      in: path
      name: accessTokenId
      schema:
        type: string
      required: true
      description: The access token id
      
    groupIdParam:
      in: path
      name: groupId
      schema:
        type: string
      required: true
      description: The group id
  
  requestBodies:
    SearchRequest:
      description: The structure to describe the search wanted and what to return
      required: true
      content:
        application/json:
          schema:
            $ref: "https://raw.githubusercontent.com/assembloo/openapi/1.0.0/repository-search.yml#/components/schemas/SearchRequest"
    
    UserManagerRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserManager'
            
    LoginRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmailLogin'

    SessionRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Session"

    UserRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"

    UserPasswordReq:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NewPasswordRequest"
            
    AccessTokenRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AccessToken"
        
    GroupRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Group"
            
    UserGroupRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GroupMembership"
            
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      
    LoginResponse:
      description: The login response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LoginResponse"

    SearchResponse:
      description: A search response of the given object
      content:
        application/json:
          schema:
            $ref: "https://raw.githubusercontent.com/assembloo/openapi/1.0.0/repository-search.yml#/components/schemas/SearchResponse"

    SessionsResponse:
      description: The sessions response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SessionsResponse"

    GroupIdsResponse:
      description: The user's group ids response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GroupIdsResponse"
  
tags:
  - name: UserManagers
  - name: Authenticate
  - name: Users
  - name: Access Tokens
  - name: Groups
  - name: Sessions
  
security:
  - bearerAuth: []
  
# EOF
