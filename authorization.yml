openapi: 3.0.1
info:
  version: "v1"
  title: Authorization (sub) API
  description: Sub API to handle authorization on a service.
  contact:
    email: support@assembloo.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
    
paths:

#  /users/{userId}/is_allowed:
#    parameters:
#    - "$ref": "#/components/parameters/userIdParam"
#    get:
#      summary: Find out if a user is allowed to perform an operation
#      tags:
#      - Users
#      parameters:
#        - in: path
#          name: permission
#          schema:
#            type: string
#          required: true
#          description: Permission string (e.g. groups:read:456)
#      responses:
#        '200':
#          description: The user was authorized
#        '401':
#          $ref: '#/components/responses/UnauthorizedError'

##### ROLE MEMBERSHIP #####

  /{serviceId}/memberships/search:
    parameters:
    - "$ref": "#/components/parameters/serviceIdParam"
    post:
      summary: Search the memberships
      tags:
      - Memberships
      requestBody:
        $ref: "#/components/requestBodies/SearchRequest"
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /{serviceId}/memberships:
    parameters:
    - "$ref": "#/components/parameters/serviceIdParam"
    get:
      summary: List the memberships
      tags:
      - Memberships
      parameters:
      - "$ref": "#/components/parameters/pageParam"
      responses:
        '200':
          $ref: '#/components/responses/SearchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Creates a membership
      tags:
      - Memberships
      requestBody:
        $ref: "#/components/requestBodies/MembershipRequest"
      responses:
        '200':
          description: Membership successfully created
          content:
            application/json:
              schema:
                type: string
                description: the ID of the created object
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Invalid membership data
  /{serviceId}/memberships/{membershipId}:
    parameters:
    - "$ref": "#/components/parameters/serviceIdParam"
    - "$ref": "#/components/parameters/membershipIdParam"
    get:
      summary: Returns a membership by ID
      tags:
      - Memberships
      responses:
        '200':
          description: A membership
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Membership"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Membership not found
    delete:
      summary: Deletes a membership by ID
      tags:
      - Memberships
      responses:
        '200':
          description: The membership was deleted
          content:
            application/json:
              schema:
                type: string
                description: the ID of the deleted object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Membership not found
  /{serviceId}/memberships/has_permission:
    parameters:
    - "$ref": "#/components/parameters/serviceIdParam"
    get:
      operationId: hasPermission
      summary: Find out if we have a certain permission
      tags:
      - Memberships
      parameters:
        - in: path
          name: permission
          schema:
            type: string
          required: true
          description: Permission string (e.g. groups:read:456)
      responses:
        '200':
          description: We're authorized
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
components:

  schemas:

    Membership:
      type: object
      description: describes the fact that someone/something is part of/attached to a owner
      properties:
        id:
          type: string
        ownerId:
          type: string
          description: e.g. a groupId
        objectId:
          type: string
        roleId:
          type: string
          description: the role of the owner on the object, gives a list of permissions on the object to the owner
      required:
      - owner_id
      - object_id
      - role_id
      example:
        id: 63312df2-dabd-46c4-a090-b5e628266111
        ownerId: 97292dac-b0ab-4fca-970f-d0f9578e47db
        objectId: 042f4ef2-d798-4e94-84b7-41a76275d878
        roleId: analyst
        
  parameters:
    pageParam:
      name: page
      in: query
      description: Page number
      schema:
        type: integer
        minimum: 0
        default: 0
    membershipIdParam:
      in: path
      name: membershipId
      schema:
        type: string
      required: true
      description: The role membership id
    serviceIdParam:
      in: path
      name: serviceId
      schema:
        type: string
      required: true
      description: The id of the service the membership sub-service is mounted on

  requestBodies:
    SearchRequest:
      description: The structure to describe the search wanted and what to return
      required: true
      content:
        application/json:
          schema:
            $ref: "https://raw.githubusercontent.com/assembloo/openapi/1.0.0/repository-search.yml#/components/schemas/SearchRequest"
            
    MembershipRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Membership"
    
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      
    SearchResponse:
      description: A search response of the given object
      content:
        application/json:
          schema:
            $ref: "https://raw.githubusercontent.com/assembloo/openapi/1.0.0/repository-search.yml#/components/schemas/SearchResponse"
  
tags:
  - name: Memberships

security:
  - bearerAuth: []
  
# EOF