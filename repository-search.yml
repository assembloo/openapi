openapi: 3.0.1

info:
  description: Assembloo Public API for respository search requests and responses
  version: "1.0.0"
  title: Repository Search
  contact:
    email: support@assembloo.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

paths: {}

components:

  schemas:
    SearchRequest:
      type: object
      properties:
        select:
          $ref: '#/components/schemas/Expressions'
        where:
          $ref: '#/components/schemas/Filter'
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortClause'
        group:
          $ref: '#/components/schemas/Group'
        facet:
          $ref: '#/components/schemas/Facets'
        pageIndex:
          type: integer
          description: zero-based number of the current page
          default: 0
        pageSize:
          type: integer
          description: number of items per page
          minimum: 1
          maximum: 100
          default: 50
      required:
        - select

##### GLOBAL COMPONENTS #####
    SortOrder:
      type: string
      enum: 
        - asc
        - desc
      description: "Sort order: asc or desc"

    UnitOfLength:
      type: string
      enum:
        - mm
        - cm
        - m 
        - km
        - in
        - yd
        - mi

##### SEARCH SELECT COMPONENTS #####

    Expressions:
      type: object
      properties: 
        expressions:
          type: array
          items:
            $ref: '#/components/schemas/Expression'

    Expression:
      type: object
      properties:
        expressionType:
          type: string
        alias:
          type: string
          description: return the expression under a give name
      required:
      - expressionType
      discriminator:
        propertyName: expressionType
        mapping:
          field: '#/components/schemas/FieldExpression'
          snippet:  '#/components/schemas/SnippetExpression'

    FieldExpression:
      allOf:
      - $ref: '#/components/schemas/Expression'
      - type: object
        properties:
          field:
            type: string
            description: field name to return
        required:
        - field

    FieldType:
      type: string
      enum:
        - binary
        - boolean
        - date
        - geo_point
        - decimal
        - integer
        - string
      description: "The type of the field"
    
    SnippetExpression:
      allOf:
      - $ref: '#/components/schemas/Expression'
      - type: object
        description: a snippet expression is when a field is highlighted with a bit of context included on both side
        properties:
          field:
            type: string
            description: field name to return
          size:
            type: integer
            description: size of the snippet to return
        required:
        - field
    
##### SEARCH FILTER COMPONENTS #####

    Filter:
      type: object
      properties:
        filterType:
          type: string
      required:
        - filterType
      discriminator:
        propertyName: filterType
        mapping:
          or:           '#/components/schemas/OrFilter'
          and:          '#/components/schemas/AndFilter'
          not:          '#/components/schemas/NotFilter'
          exactmatch:   '#/components/schemas/ExactMatchFilter'
          daterange:    '#/components/schemas/DateRangeFilter'
          numrange:     '#/components/schemas/NumberRangeFilter'
          geo:          '#/components/schemas/GeoDistanceFilter'
          fulltext:     '#/components/schemas/FullTextFilter'

    OrFilter:
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        additionalProperties: false
        properties:
          filters:
            type: array
            items:
              $ref: '#/components/schemas/Filter'
        required: 
        - filters
      
    AndFilter:
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        additionalProperties: false
        properties:
          filters:
            type: array
            items:
              $ref: '#/components/schemas/Filter'
        required: 
        - filters

    NotFilter:
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        additionalProperties: false
        properties:
          filter:
            $ref: '#/components/schemas/Filter'
        required: 
        - filter

    ExactMatchFilter:
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        description: "exact match of the specified value"
        properties:
          field:
            type: string
          value:
            type: string
        additionalProperties: false
      
    DateRangeFilter:
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        minProperties: 1
        maxProperties: 2
        properties:
          field:
            type: string
          from:
            type: string
            format: date
          to:
            type: string
            format: date
        description: "a filter by date range, to and from bounds are included"
        additionalProperties: false
        
    NumberRangeFilter:
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        minProperties: 1
        maxProperties: 2
        properties:
          field:
            type: string
          from:
            type: number
          to:
            type: number
        description: "a filter by number range, to and from bounds are included"
        additionalProperties: false
      
    GeoDistanceFilter:
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        properties:
          around:
            $ref: '#/components/schemas/GeoPoint'
          distance:
            type: integer
          field:
            type: string  
          unit:
            $ref: '#/components/schemas/UnitOfLength'            
        required:
          - type
          - around
          - distance
          - field
          - unit
        
    FullTextFilter:
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        description: what is used to build a traditional search box
        properties:
          text:
            type: string
            description: the text to search
          fields:
            type: array
            items:
              type: string
              description: A field to search on

##### SEARCH SORT COMPONENTS #####

    SortClause:
      type: object
      properties:
        type:
          type: string
        sortOrder:
          $ref: '#/components/schemas/SortOrder'
      required:
      - type
      discriminator:
        propertyName: type
        mapping:
          field:  '#/components/schemas/SortByField'
          geo:    '#/components/schemas/SortByGeoField'
          score:  '#/components/schemas/SortByScore'

    SortByField:
      allOf:
      - $ref: '#/components/schemas/SortClause'
      - type: object
        properties:
          field:
            type: string
            description: the field we want the sort to operate on
        required:
        - field
        
    SortByGeoField:
      allOf:
      - $ref: '#/components/schemas/SortByField'
      - type: object
        description: "Sort by geographical distance from the point given as the geo center"
        properties:
          around:
            $ref: '#/components/schemas/GeoPoint'
        required:
        - around
        
    SortByScore:
      allOf:
      - $ref: '#/components/schemas/SortClause'
      - type: object
        description: you either boost by field name or by field value. You would set only the field property or the field and value properties respectively. The geo_center field is needed if the field chosen is a geo point, because we need to specify the point we're comparing it with.

##### SEARCH GROUP COMPONENTS #####
    
    Group:
      type: object
      properties:
        field:
          type: string
          description: field to group by
        size:
          type: integer
          description: how many hits per group we return
              
    GeoPoint:
      type: object
      properties:
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
      required:
      - lat
      - lon
      
##### SEARCH FACET COMPONENTS #####    

    Facets:
      type: object
      properties:
        facets:
          type: array
          items:
            $ref: '#/components/schemas/Facet'
          
    Facet:
      type: object
      properties:
        facetType:
          type: string
      required:
        - facetType
      discriminator:
        propertyName: facetType
        mapping:
          value: '#/components/schemas/ValueFacet'
          range: '#/components/schemas/RangeFacet'
          geo:  '#/components/schemas/GeoFacet'
       
    ValueFacetOrder:
      type: string
      enum: 
        - alphanum_asc
        - alphanum_desc
        - count_desc
      description: "alphanum_asc: sorted from a to z, alphanum_desc: sorted from z to a"
      default: count
   
    ValueFacet:
      allOf:
      - $ref: '#/components/schemas/Facet'
      - type: object
        properties:
          field:
            type: string
          size:
            type: integer
            default: 50
          sortOrder:
            $ref: '#/components/schemas/ValueFacetOrder'
            description: "alphanum means that facets are returned by name from a to z, count means the biggest buckets are returned first"
            default: count_desc
        required:
        - field
              
    RangeFacet:
      allOf:
      - $ref: '#/components/schemas/Facet'
      - type: object
        properties:
          field:
            type: string
          ranges:
            type: array
            items:
              type: object
              properties:
                from:
                  type: string
                to:
                  type: string
                key:
                  type: string
                  description: optional name of the range
              required:
              - from
              - to
        required:
        - ranges
        
    GeoFacet:
      allOf:
      - $ref: '#/components/schemas/Facet'
      - type: object
        properties:
          around:
            $ref: '#/components/schemas/GeoPoint'
          distances:
            type: array
            description: "list of distances, eg 5, 10, 15, 20, it will return 5 buckets: 0-5, 5-10, 10-15, 15-20 and 20+"
            items:
              type: string
          field:
            type: string  
          unit:
            $ref: '#/components/schemas/UnitOfLength'
        required:
          - around
          - distances
          - field
          - unit

##### SEARCH REPONSE COMPONENTS #####  
      
    SearchResponse:
      type: object
      properties:
        total_count:
          type: integer
          format: int64
          description: total number of records found in the datastore
        results:
            $ref: "#/components/schemas/ResultSet"
        facets:
          type: array
          items:
            $ref: "#/components/schemas/FacetResponse"

    ResultSet:
      type: object
      properties:
        schema : 
          $ref: "#/components/schemas/Schema"
        items:
          type: array
          items:
            $ref: "#/components/schemas/SearchResult"
      required:
      - schema
      - items

    SearchResult:
      type: object
      additionalProperties: {}
      example:
        firstname: 
          raw: john
        lastname:
          raw: doe
        age: 36
        city: City of London
        city_snippet: City of <b>London</b>

    Schema:
      type: object
      properties:
        id:
          type: string
          pattern: "^[a-z]+[a-z0-9\\-\\.]*$"
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
      required:
      - id
      - fields
      example:
        id: my-schema
        fields:
        - name: itemName
          type: string
        - name: itemPrice
          type: decimal
        - name: itemPurchaseDate
          type: date
    
    Field:
      type: object
      properties:
        name:
          type: string
          description: name of the field
        type:
          $ref: '#/components/schemas/FieldType'
          description: type of the field
          
    FacetResponse:
      type: object
      properties:
        facetType:
          type: string
      required:
      - facetType
      discriminator:
        propertyName: facetType
        mapping:
          value: '#/components/schemas/ValueFacetResponse'
          range: '#/components/schemas/RangeFacetResponse'
          geo: '#/components/schemas/GeoFacetResponse'
          
    ValueFacetResponse:
      allOf:
      - $ref: '#/components/schemas/FacetResponse'
      - type: object
        properties:
          values:
            type: array
            items:
              type: object
              properties:
                value:
                  type: string
                count:
                  type: integer
                  format: int64

    RangeFacetResponse:
      allOf:
      - $ref: '#/components/schemas/FacetResponse'
      - type: object
        properties:
          ranges:
            type: array
            items:
              type: object
              properties:
                from:
                  type: string
                to:
                  type: string
                key:
                  type: string
                  description: optional name of the range
                count:
                  type: integer
                  format: int64

    GeoFacetResponse:
      allOf:
      - $ref: '#/components/schemas/FacetResponse'
      - type: object
        properties:
          around:
            $ref: '#/components/schemas/GeoPoint'
          distances:
            type: array
            items:
              type: object
              properties:
                from:
                  type: string
                to:
                  type: string
                count:
                  type: integer
                  format: int64
          
# EOF
