openapi: 3.0.1

info:
  description: Assembloo Public API for respository search requests and responses
  version: "1.0.0"
  title: Repository Search
  contact:
    email: support@assembloo.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

paths: {}

components:
  schemas:
    SearchRequest:
      type: object
      properties:
        selectExpressions:
          type: array
          items:
            $ref: '#/components/schemas/SelectExpression'
        where:
          $ref: '#/components/schemas/Filter'
        sortClauses:
          type: array
          items:
            $ref: '#/components/schemas/SortClause'
        group:
          $ref: '#/components/schemas/Group'
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/Aggregation'
        pageIndex:
          type: integer
          description: zero-based number of the current page
          default: 0
        pageSize:
          type: integer
          description: number of items per page
          minimum: 1
          maximum: 100
          default: 50
        relevance:
          $ref: '#/components/schemas/Relevance'
      required:
        - select

##### GLOBAL COMPONENTS #####
    SortOrder:
      type: string
      enum: 
        - asc
        - desc
      description: "Sort order: asc or desc"

    UnitOfLength:
      type: string
      enum:
        - millimeter
        - centimeter
        - meter
        - kilometer
        - inch
        - yard
        - mile

    Range:
      type: object
      properties:
        from:
          type: string
        to:
          type: string

    NamedRange:
      allOf:
      - $ref: '#/components/schemas/Range'
      - type: object
        properties:
          name:
            type: string
          description: name of the range

##### SEARCH SELECT COMPONENTS #####
    SelectExpressions:
      type: object
      properties: 
        expressions:
          type: array
          items:
            $ref: '#/components/schemas/SelectExpression'

    SelectExpression:
      type: object
      properties:
        expressionType:
          type: string
        alias:
          type: string
          description: return the expression under a give name
      required:
      - expressionType
      discriminator:
        propertyName: expressionType
        mapping:
          field: '#/components/schemas/SelectField'
          snippet:  '#/components/schemas/SelectSnippet'

    SelectField:
      allOf:
      - $ref: '#/components/schemas/SelectExpression'
      - type: object
        properties:
          field:
            type: string
            description: field name to return
        required:
        - field

    FieldType:
      type: string
      enum:
        - binary
        - boolean
        - date
        - geo_point
        - decimal
        - integer
        - string
      description: "The type of the field"
    
    SelectSnippet:
      allOf:
      - $ref: '#/components/schemas/SelectExpression'
      - type: object
        description: a snippet expression is when a field is highlighted with a bit of context included on both side
        properties:
          field:
            type: string
            description: field name to return
          size:
            type: integer
            description: size of the snippet to return
        required:
        - field
    
##### SEARCH FILTER COMPONENTS #####
    Filter:
      type: object
      properties:
        filterType:
          type: string
      required:
        - filterType
      discriminator:
        propertyName: filterType
        mapping:
          or:                  '#/components/schemas/OrFilter'
          and:                 '#/components/schemas/AndFilter'
          not:                 '#/components/schemas/NotFilter'
          exactmatch:          '#/components/schemas/ExactMatchFilter'
          between:             '#/components/schemas/BetweenFilter'
          betweendistance:     '#/components/schemas/BetweenDistanceFilter'
          fulltext:            '#/components/schemas/FullTextFilter'

    OrFilter:
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        additionalProperties: false
        properties:
          filters:
            type: array
            items:
              $ref: '#/components/schemas/Filter'
        required: 
        - filters
      
    AndFilter:
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        additionalProperties: false
        properties:
          filters:
            type: array
            items:
              $ref: '#/components/schemas/Filter'
        required: 
        - filters

    NotFilter:
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        additionalProperties: false
        properties:
          filter:
            $ref: '#/components/schemas/Filter'
        required: 
        - filter

    ExactMatchFilter:
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        description: "exact match of the specified value"
        properties:
          field:
            type: string
          value:
            type: string
        additionalProperties: false
      
    BetweenFilter:
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        properties:
          field:
            type: string
          range:
            $ref: '#/components/schemas/Range'
        description: "a filter between two bounds, to and from bounds are included"
        additionalProperties: false
      
    BetweenDistanceFilter:
      allOf:
      - $ref: '#/components/schemas/BetweenFilter'
      - type: object
        properties:
          origin:
            $ref: '#/components/schemas/GeoPoint'
          unit:
            $ref: '#/components/schemas/UnitOfLength'            
        required:
          - origin
          - unit
        
    FullTextFilter:
      allOf:
      - $ref: '#/components/schemas/Filter'
      - type: object
        description: what is used to build a traditional search box
        properties:
          text:
            type: string
            description: the text to search
          fields:
            type: array
            items:
              type: string
              description: A field to search on

##### SEARCH SORT COMPONENTS #####
    SortClause:
      type: object
      properties:
        type:
          type: string
        sortOrder:
          $ref: '#/components/schemas/SortOrder'
      required:
      - type
      discriminator:
        propertyName: type
        mapping:
          field:  '#/components/schemas/SortByField'
          geo:    '#/components/schemas/SortByDistance'
          score:  '#/components/schemas/SortByScore'

    SortByField:
      allOf:
      - $ref: '#/components/schemas/SortClause'
      - type: object
        properties:
          field:
            type: string
            description: the field we want the sort to operate on
        required:
        - field
        
    SortByDistance:
      allOf:
      - $ref: '#/components/schemas/SortByField'
      - type: object
        description: "Sort by geographical distance from the point given as the geo center"
        properties:
          origin:
            $ref: '#/components/schemas/GeoPoint'
        required:
        - origin
        
    SortByScore:
      allOf:
      - $ref: '#/components/schemas/SortClause'
      - type: object
        description: you either boost by field name or by field value. You would set only the field property or the field and value properties respectively. The geo_center field is needed if the field chosen is a geo point, because we need to specify the point we're comparing it with.

##### SEARCH GROUP COMPONENTS #####
    Group:
      type: object
      properties:
        field:
          type: string
          description: field to group by
        size:
          type: integer
          description: how many hits per group we return
              
    GeoPoint:
      type: object
      properties:
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
      required:
      - lat
      - lon
      
##### AGGREGATIONS #####
    Aggregation:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
      required:
        - name
        - type
      discriminator:
        propertyName: type
        mapping:
          value: '#/components/schemas/GroupByValueAggregation'
          range: '#/components/schemas/GroupByRangeAggregation'
          geo:  '#/components/schemas/GroupByDistanceAggregation'
          statistics:  '#/components/schemas/StatisticsAggregation'
          facet:  '#/components/schemas/FacetFilterAggregation'

    GroupByValueAggregationOrder:
      type: string
      enum: 
        - alphanum_asc
        - alphanum_desc
        - count_desc
      description: "alphanum_asc: sorted from a to z, alphanum_desc: sorted from z to a"
      default: count

    FacetFilterAggregation:
      allOf:
      - $ref: '#/components/schemas/Aggregation'
      - type: object
        properties:
          aggregations:
            type: array
            items:
              $ref: '#/components/schemas/Aggregation'

    GroupByValueAggregation:
      allOf:
      - $ref: '#/components/schemas/Aggregation'
      - type: object
        properties:
          field:
            type: string
          size:
            type: integer
            default: 50
          sortOrder:
            $ref: '#/components/schemas/GroupByValueAggregationOrder'
            description: "alphanum means that facets are returned by name from a to z, count means the biggest buckets are returned first"
            default: count_desc
        required:
        - field
              
    GroupByRangeAggregation:
      allOf:
      - $ref: '#/components/schemas/Aggregation'
      - type: object
        properties:
          field:
            type: string
          ranges:
            type: array
            items:
              $ref: '#/components/schemas/NamedRange'
        required:
        - field
        - ranges
        
    GroupByDistanceAggregation:
      allOf:
      - $ref: '#/components/schemas/GroupByRangeAggregation'
      - type: object
        properties:
          origin:
            $ref: '#/components/schemas/GeoPoint'
          unit:
            $ref: '#/components/schemas/UnitOfLength'
        required:
          - field
          - origin
          - ranges
          - unit

    StatisticsAggregation:
      allOf:
      - $ref: '#/components/schemas/Aggregation'
      - type: object
        properties:
          avg:
            type: boolean
          count:
            type: boolean
          count_approximate:
            type: boolean
          excludeFilter:
            type: boolean
          field:
            type: string  
          max: 
            type: boolean
          min:
            type: boolean
          sum:
            type: boolean
        required:
          - field

##### SEARCH RESPONSE COMPONENTS #####
    SearchResponse:
      type: object
      properties:
        total_count:
          type: integer
          format: int64
          description: total number of records found in the datastore
        results:
            $ref: "#/components/schemas/ResultSet"
        aggregations:
          type: array
          items:
            $ref: "#/components/schemas/AggregationResponse"

    ResultSet:
      type: object
      properties:
        schema : 
          $ref: "#/components/schemas/Schema"
        items:
          type: array
          items:
            $ref: "#/components/schemas/SearchResult"
      required:
      - schema
      - items

    SearchResult:
      type: object
      additionalProperties: {}
      example:
        firstname: 
          raw: john
        lastname:
          raw: doe
        age: 36
        city: City of London
        city_snippet: City of <b>London</b>

    Schema:
      type: object
      properties:
        id:
          type: string
          pattern: "^[a-z]+[a-z0-9\\-\\.]*$"
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
      required:
      - id
      - fields
      example:
        id: my-schema
        fields:
        - name: itemName
          type: string
        - name: itemPrice
          type: decimal
        - name: itemPurchaseDate
          type: date
    
    Field:
      type: object
      properties:
        name:
          type: string
          description: name of the field
        type:
          $ref: '#/components/schemas/FieldType'
          description: type of the field
          
    AggregationResponse:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
      required:
      - name
      - type
      discriminator:
        propertyName: type
        mapping:
          value: '#/components/schemas/GroupByValueAggregationResponse'
          range: '#/components/schemas/GroupByRangeAggregationResponse'
          geo: '#/components/schemas/GroupByDistanceAggregationResponse'
          
    GroupByValueAggregationResponse:
      allOf:
      - $ref: '#/components/schemas/AggregationResponse'
      - type: object
        properties:
          values:
            type: array
            items:
              type: object
              properties:
                value:
                  type: string
                count:
                  type: integer
                  format: int64

    GroupByRangeAggregationResponse:
      allOf:
      - $ref: '#/components/schemas/AggregationResponse'
      - type: object
        properties:
          ranges:
            type: array
            items:
              type: object
              properties:
                from:
                  type: string
                to:
                  type: string
                key:
                  type: string
                  description: optional name of the range
                count:
                  type: integer
                  format: int64

    GroupByDistanceAggregationResponse:
      allOf:
      - $ref: '#/components/schemas/AggregationResponse'
      - type: object
        properties:
          origin:
            $ref: '#/components/schemas/GeoPoint'
          distances:
            type: array
            items:
              type: object
              properties:
                from:
                  type: string
                to:
                  type: string
                count:
                  type: integer
                  format: int64

    StatisticsAggregationResponse:
      allOf:
      - $ref: '#/components/schemas/AggregationResponse'
      - type: object
        properties:
          average:
            type: number
            format: double
          count:
            type: integer
            format: int64
          max:
            type: number
            format: double
          min:
            type: number
            format: double
          sum:
            type: number
            format: double

##### RELEVANCE COMPONENTS #####
    Relevance:
      type: object
      properties:
        priorityOfFields:
          type: array
          items:
            type: string
        promoteDocuments:
          type: array
          items:
            $ref: '#/components/schemas/RankDocument'
        demoteDocuments:
          type: array
          items:
            $ref: '#/components/schemas/RankDocument'

    RankDocument:
      type: object
      properties:
        type:
          type: string
      required:
        - type
      discriminator:
        propertyName: type
        mapping:
          byValue: '#/components/schemas/RankDocumentByValue'
          byDate: '#/components/schemas/RankDocumentByDate'
          byDistance: '#/components/schemas/RankDocumentByDistance'

    RankDocumentByValue:
      allOf:
      - $ref: '#/components/schemas/RankDocument'
      - type: object
        properties:
          fieldName:
            type: string
          value:
            type: string
        required:
          - fieldName
          - value

    RankDocumentByDate:
      allOf:
      - $ref: '#/components/schemas/RankDocument'
      - type: object
        properties:
          fieldName:
            type: string
          date:
            type: string
        required:
          - fieldName
          - date

    RankDocumentByDistance:
      allOf:
      - $ref: '#/components/schemas/RankDocument'
      - type: object
        properties:
          fieldName:
            type: string
          origin:
            type: string
        required:
          - fieldName
          - latLon

# EOF
